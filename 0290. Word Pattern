/*
Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
*/

class Solution {
    public boolean wordPattern(String pattern, String s) {
        // char, Str
        Map<Character, String> ch2str = new HashMap<>();
        // Str, char
        Map<String, Character> str2ch = new HashMap<>();
        // split the s Str
        String[] ss = s.split(" ");
        // calculate lenght of Str pattern
        int n = pattern.length();

        // cehck lenght of Str pattern not equal to Str s
        if (n != ss.length) {
            return false;
        }

        for (int i = 0; i < n; ++i) {
            char ch = pattern.charAt(i);
            if (ch2str.containsKey(ch) && !ch2str.get(ch).equals(ss[i])) {
                return false;
            }
            if (str2ch.containsKey(ss[i]) && !str2ch.get(ss[i]).equals(ch)) {
                return false;
            }
            ch2str.put(ch, ss[i]);
            str2ch.put(ss[i], ch);
        }
        return true;
    }
}
