class node{
  node *links[26] = [NULL];
  bool flag = false;

public:
  bool containsKey(char ch){
    return links[ch-'a']!NULL;
  }

  void set_(char ch, node *new_node){
    links[ch='a']=new_node;
  }

  node* get_(char c){
    return links[c-'a'];
  }

  bool is_end(){
    return flag;
  }
  void set_end(){
    flag = true;
  }
};

class trie{
public:
  node *root;
  trie(){
    root = new node();
  }

  void insert(string s){
    node *curr = root;
    for(auto ch:s){
      if(!curr->containsKey(ch)){
        curr->set_(ch, new node());
      }
      curr=curr->get(ch);
    }
  curr->set_end();
  }

  bool search_(string s){
    node *curr = root; 
    for(auto ch:s){
      if(!curr->containsKey(ch))
          return false;
      curr = curr->get_(ch);
    }
  return curr->is_end();
  }

  bool is_prefix(string s){
    node *curr = root;
    for(auto ch:s){
      if(curr->containsKey(ch))
          return false;
    curr = curr->get_(ch);
    }
    return true;
  }
  
};


int main(){
  trie *t = new trie();
  string s1="hello";
  string s2 = "heroes";
  t->insert(s1);
  t->insert(s2);
  cout<<t<<search("hello world");
  cout<<t->is_prefix("he");
}



-------------------------------------------------------------------
// class node{
// public:
//     node *links[26]=[NULL];
//     bool flag=false;
//     // node() {
//     //     flag = false;
//     //     for (auto &a : links) a = nullptr;
//     // }
//   bool containsKey(char ch){
//     return links[ch-'a']!NULL;
//   }

//   void set_(char ch, node *new_node){
//     links[ch='a']=new_node;
//   }

//   node* get_(char c){
//     return links[c-'a'];
//   }

//   bool is_end(){
//     return flag;
//   }
//   void set_end(){
//     flag = true;
//   }
// };

// class Trie {
// public:
//     Trie() {
//         root = new node();
//     }
    
//     void insert(string s) {
//         node *curr = root;
//             for(auto ch:s){
//             if(!curr->containsKey(ch)){
//                 curr->set_(ch, new node());
//             }
//             curr=curr->get(ch);
//             }
//         curr->set_end();
//     }
    
//     bool search(string s) {
//         node *curr = root; 
//         for(auto ch:s){
//             if(!curr->containsKey(ch))
//                 return false;
//             curr = curr->get_(ch);
//             }
//         return curr->is_end();
//     }
    
//     bool startsWith(string s) {
//         node *curr = root;
//         for(auto ch:s){
//         if(curr->containsKey(ch))
//             return false;
//         curr = curr->get_(ch);
//         }
//         return true;
//     }
// };

class TrieNode {
public:
    TrieNode *links[26];
    bool isWord;
    TrieNode() {
        isWord = false;
        for (auto &a : links) a = nullptr;
    }
};
class Trie {
    TrieNode* root;
public:
    Trie() {
        root = new TrieNode();
    }
    void insert(string s) {
        TrieNode *p = root;
        for (auto &a : s) {
            int i = a - 'a';
            if (!p->links[i]) p->links[i] = new TrieNode();
            p = p->links[i];
        }
        p->isWord = true;
    }
    bool search(string key, bool prefix=false) {
        TrieNode *p = root;
        for (auto &a : key) {
            int i = a - 'a';
            if (!p->links[i]) return false;
            p = p->links[i];
        }
        if (prefix==false) return p->isWord;
        return true;
    }
    bool startsWith(string prefix) {
        return search(prefix, true);
    }
};

// /**
//  * Your Trie object will be instantiated and called as such:
//  * Trie* obj = new Trie();
//  * obj->insert(word);
//  * bool param_2 = obj->search(word);
//  * bool param_3 = obj->startsWith(prefix);
//  */
